#!/bin/bash
set -euo pipefail

# where is the script? even if it's symlinked
script_folder="$(cd "$(dirname "$(realpath "$0")")" && pwd)"

launch_agents_folder="$HOME/Library/LaunchAgents"
run_task_path="$script_folder/run-task.sh"

usage() {
    echo "Usage:"
    echo "  $0                    # List all scheduled tasks"
    echo "  $0 list               # List all scheduled tasks"
    echo "  $0 create <task-name> <interval> <command>"
    echo "  $0 remove <task-name>"
    echo "  $0 logs <task-name>"
    echo "  $0 help"
    echo ""
    echo "Intervals:"
    echo "  hourly    - Run every hour"
    echo "  daily     - Run every 24 hours"
    echo "  <number>  - Run every N minutes"
    echo ""
    echo "Examples:"
    echo "  $0                    # Show all tasks"
    echo "  $0 create backup-docs hourly \"rsync -av ~/Documents /backup/\""
    echo "  $0 create cleanup daily \"rm -f /tmp/*.tmp\""
    echo "  $0 remove backup-docs"
    echo "  $0 logs backup-docs"
}

list_tasks() {
    echo "Scheduled tasks:"
    echo ""
    
    local found=false
    for plist in "$launch_agents_folder"/com.user.scheduled.*.plist; do
        if [[ -f "$plist" ]]; then
            found=true
            local basename
            basename=$(basename "$plist" .plist)
            local task_name=${basename#com.user.scheduled.}
            local status="unloaded"
            
            if launchctl list | grep -q "com.user.scheduled.$task_name"; then
                status="loaded"
            fi
            
            printf "%-20s [%s]\n" "$task_name" "$status"
        fi
    done
    
    if [[ "$found" = false ]]; then
        echo "No scheduled tasks found."
    fi
}

interval_to_seconds() {
    case "$1" in
        hourly) echo "3600" ;;
        daily) echo "86400" ;;
        *) echo "$(($1 * 60))" ;;  # Convert minutes to seconds
    esac
}

escape_xml() {
    local text="$1"
    text="${text//&/&amp;}"
    text="${text//</&lt;}"
    text="${text//>/&gt;}"
    text="${text//\"/&quot;}"
    text="${text//\'/&apos;}"
    echo "$text"
}

create_plist() {
    local task_name="$1"
    local command="$2"
    local interval_seconds="$3"
    local plist_file="$launch_agents_folder/com.user.scheduled.$task_name.plist"
    
    # Escape XML special characters in command
    local escaped_command
    escaped_command=$(escape_xml "$command")
    
    # Create symlink for this task
    local symlink_path="$script_folder/tasks/$task_name"
    ln -sf "$run_task_path" "$symlink_path"
    
    cat > "$plist_file" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
    <key>Label</key>
    <string>com.user.scheduled.$task_name</string>
    
    <key>ProgramArguments</key>
    <array>
        <string>$symlink_path</string>
        <string>$task_name</string>
        <string>$escaped_command</string>
    </array>
    
    <key>StartInterval</key>
    <integer>$interval_seconds</integer>
    
    <key>RunAtLoad</key>
    <false/>
    
    <key>StandardOutPath</key>
    <string>/tmp/com.user.scheduled.$task_name.stdout</string>
    
    <key>StandardErrorPath</key>
    <string>/tmp/com.user.scheduled.$task_name.stderr</string>
    
    <key>EnvironmentVariables</key>
    <dict>
        <key>PATH</key>
        <string>/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</string>
    </dict>
</dict>
</plist>
EOF
    
    echo "$plist_file"
}

create_task() {
    local task_name="$1"
    local interval="$2"
    local command="$3"
    
    # Validate task name
    if [[ ! "$task_name" =~ ^[a-zA-Z0-9_-]+$ ]]; then
        echo "Error: Task name must contain only letters, numbers, hyphens, and underscores"
        return 1
    fi
    
    # Validate interval
    if [[ "$interval" != "hourly" && "$interval" != "daily" ]]; then
        if [[ ! "$interval" =~ ^[0-9]+$ ]]; then
            echo "Error: Interval must be 'hourly', 'daily', or a number of minutes"
            return 1
        fi
        # Check for reasonable interval range (1 minute to 1 week in minutes)
        if [[ "$interval" -lt 1 || "$interval" -gt 10080 ]]; then
            echo "Error: Custom interval must be between 1 and 10080 minutes (1 week)"
            return 1
        fi
    fi
    
    # Convert interval to seconds
    local interval_seconds
    interval_seconds=$(interval_to_seconds "$interval")
    
    # Check if task already exists
    if [[ -f "$launch_agents_folder/com.user.scheduled.$task_name.plist" ]]; then
        echo "Error: Task '$task_name' already exists. Remove it first with 'remove'"
        return 1
    fi
    
    # Create plist file
    local plist_file
    plist_file=$(create_plist "$task_name" "$command" "$interval_seconds")
    echo "Created plist: $plist_file"
    
    # Load the task
    echo "Loading task..."
    launchctl load "$plist_file"
    
    if launchctl list | grep -q "com.user.scheduled.$task_name"; then
        echo "Task '$task_name' created and loaded successfully!"
        if [[ "$interval" == "hourly" ]]; then
            echo "It will run every hour."
        elif [[ "$interval" == "daily" ]]; then
            echo "It will run every 24 hours."
        else
            echo "It will run every $interval minutes."
        fi
        echo ""
        echo "To view logs: $0 logs $task_name"
        echo "To remove: $0 remove $task_name"
    else
        echo "Error: Failed to load task"
        return 1
    fi
}

remove_task() {
    local task_name="$1"
    local plist_file="$launch_agents_folder/com.user.scheduled.$task_name.plist"
    
    if [[ ! -f "$plist_file" ]]; then
        echo "Error: Task '$task_name' not found"
        return 1
    fi
    
    # Unload if loaded
    if launchctl list | grep -q "com.user.scheduled.$task_name"; then
        echo "Unloading task..."
        launchctl unload "$plist_file"
    fi
    
    # Remove plist file
    rm -f "$plist_file"
    
    # Remove symlink
    local symlink_path="$script_folder/tasks/$task_name"
    if [[ -L "$symlink_path" ]]; then
        unlink "$symlink_path"
    fi
    
    echo "Task '$task_name' removed successfully"
}

show_logs() {
    local task_name="$1"
    local log_file="$script_folder/logs/$task_name.log"
    
    if [[ ! -f "$log_file" ]]; then
        echo "No logs found for task '$task_name'"
        return 1
    fi
    
    echo "Recent logs for task '$task_name':"
    tail -n 50 "$log_file"
}

main() {
    case "${1:-}" in
        ""|list)
            list_tasks
            ;;
        
        create)
            if [[ $# -lt 4 ]]; then
                echo "Error: Insufficient arguments"
                usage
                exit 1
            fi
            create_task "$2" "$3" "$4"
            ;;
        
        remove)
            if [[ -z "${2:-}" ]]; then
                echo "Error: Task name required"
                usage
                exit 1
            fi
            remove_task "$2"
            ;;
        
        logs)
            if [[ -z "${2:-}" ]]; then
                echo "Error: Task name required"
                usage
                exit 1
            fi
            show_logs "$2"
            ;;
        
        help|--help|-h)
            usage
            ;;
        
        *)
            echo "Error: Unknown option '$1'"
            usage
            exit 1
            ;;
    esac
}

main "$@"
